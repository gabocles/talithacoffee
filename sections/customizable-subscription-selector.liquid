{%- liquid
  assign selected_collection = collections[section.settings.collection]
  assign products = selected_collection.products
-%}

{%- comment -%} DEBUG: Informaci√≥n de productos {%- endcomment -%}
{% comment %} <div style="background: #f0f0f0; padding: 20px; margin: 20px 0; border: 2px solid #ccc; font-family: monospace; font-size: 12px;">
  <h3>üêõ DEBUG: Informaci√≥n de Productos</h3>

  <p><strong>Colecci√≥n seleccionada:</strong> {{ section.settings.collection }}</p>
  <p><strong>Nombre de la colecci√≥n:</strong> {{ selected_collection.title }}</p>
  <p><strong>Total de productos:</strong> {{ products.size }}</p>

  {%- for product in products -%}
    <div style="border: 1px solid #999; margin: 10px 0; padding: 10px; background: white;">
      <h4>Producto {{ forloop.index }}: {{ product.title }}</h4>
      <p><strong>ID:</strong> {{ product.id }}</p>
      <p><strong>Handle:</strong> {{ product.handle }}</p>
      <p><strong>Precio:</strong> {{ product.price | money }}</p>
      <p><strong>Disponible:</strong> {{ product.available }}</p>
      <p><strong>Tipo:</strong> {{ product.type }}</p>
      <p><strong>Vendor:</strong> {{ product.vendor }}</p>

      <h5>üéØ Variantes ({{ product.variants.size }}):</h5>
      {%- for variant in product.variants -%}
        <div style="margin-left: 20px; padding: 5px; border-left: 2px solid #ddd;">
          <p>
            <strong>Variante {{ forloop.index }}:</strong> {{ variant.title }}
          </p>
          <p><strong>ID:</strong> {{ variant.id }}</p>
          <p><strong>SKU:</strong> {{ variant.sku }}</p>
          <p><strong>Precio:</strong> {{ variant.price | money }}</p>
          <p><strong>Disponible:</strong> {{ variant.available }}</p>
          <p><strong>Inventario:</strong> {{ variant.inventory_quantity }}</p>

          {%- if variant.options.size > 0 -%}
            <p><strong>Opciones:</strong></p>
            {%- for option in variant.options -%}
              <span style="background: #e0e0e0; padding: 2px 5px; margin: 2px; display: inline-block;">
                {{- option -}}
              </span>
            {%- endfor -%}
          {%- endif -%}
        </div>
      {%- endfor -%}

      <h5>‚öôÔ∏è Opciones del Producto ({{ product.options.size }}):</h5>
      {%- for option in product.options -%}
        <div style="margin-left: 20px; padding: 5px; border-left: 2px solid #ddd;">
          <p>
            <strong>{{ option.name }}:</strong>
          </p>
          <p><strong>Posici√≥n:</strong> {{ option.position }}</p>
          <p><strong>Valores:</strong></p>
          {%- for value in option.values -%}
            <span style="background: #e0f0ff; padding: 2px 5px; margin: 2px; display: inline-block;">{{ value }}</span>
          {%- endfor -%}
        </div>
      {%- endfor -%}

      <h5>üìÖ Selling Plan Groups ({{ product.selling_plan_groups.size }}):</h5>
      {%- for group in product.selling_plan_groups -%}
        <div style="margin-left: 20px; padding: 5px; border-left: 2px solid #ddd;">
          <script>
            console.log('Grupo:', {{ group | json }});
          </script>
          <p>
            <strong>Grupo {{ forloop.index }}:</strong> {{ group.name }}
          </p>
          <p><strong>ID:</strong> {{ group.id }}</p>
          <p><strong>App ID:</strong> {{ group.app_id }}</p>

          <h6>üìã Selling Plans ({{ group.selling_plans.size }}):</h6>
          {%- for plan in group.selling_plans -%}
            <div style="margin-left: 20px; padding: 3px; background: #f9f9f9;">
              <p>
                <strong>Plan {{ forloop.index }}:</strong> {{ plan.name }}
              </p>
              <p><strong>ID:</strong> {{ plan.id }}</p>
              <p><strong>Descripci√≥n:</strong> {{ plan.description }}</p>

              {%- if plan.options.size > 0 -%}
                <p><strong>Opciones del Plan:</strong></p>
                {%- for option in plan.options -%}
                  <div style="margin-left: 10px;">
                    <p>
                      <strong>{{ option.name }}:</strong> {{ option.value }}
                    </p>
                  </div>
                {%- endfor -%}
              {%- endif -%}

              {%- if plan.price_adjustments.size > 0 -%}
                <p><strong>Ajustes de Precio:</strong></p>
                {%- for adjustment in plan.price_adjustments -%}
                  <div style="margin-left: 10px;">
                    <p>
                      <strong>Orden:</strong> {{ adjustment.order_count }} - <strong>Valor:</strong>
                      {{ adjustment.value -}}
                      {{- adjustment.value_type }}
                    </p>
                  </div>
                {%- endfor -%}
              {%- endif -%}
            </div>
          {%- endfor -%}
        </div>
      {%- endfor -%}

      <h5>üè∑Ô∏è Tags:</h5>
      <p>{{ product.tags | join: ', ' }}</p>

      <h5>üñºÔ∏è Im√°genes ({{ product.images.size }}):</h5>
      {%- for image in product.images limit: 3 -%}
        <img src="{{ image | img_url: '100x' }}" alt="{{ product.title }}" style="margin: 5px; border: 1px solid #ccc;">
      {%- endfor -%}
    </div>
  {%- endfor -%}

  <h3>üé® Metaobjetos de Iconos</h3>
  {%- if shop.metaobjects.image_icon_urls -%}
    {%- for icon_group in shop.metaobjects.image_icon_urls.values -%}
      <div style="border: 1px solid #999; margin: 10px 0; padding: 10px; background: white;">
        <h4>Grupo de Iconos {{ forloop.index }}</h4>
        <p><strong>ID:</strong> {{ icon_group.id }}</p>
        <p><strong>Handle:</strong> {{ icon_group.handle }}</p>

        {%- if icon_group.options -%}
          <h5>Opciones de Iconos:</h5>
          {%- for option in icon_group.options.value -%}
            <div style="margin-left: 20px; padding: 5px; border-left: 2px solid #ddd;">
              <p><strong>Nombre:</strong> {{ option.name }}</p>
              {%- if option.image_url -%}
                <p><strong>URL de Imagen:</strong> {{ option.image_url.value }}</p>
                <img
                  src="{{ option.image_url.value | image_url }}"
                  alt="{{ option.name }}"
                  style="width: 30px; height: 30px; margin: 5px;"
                >
              {%- endif -%}
            </div>
          {%- endfor -%}
        {%- endif -%}
      </div>
    {%- endfor -%}
  {%- else -%}
    <p>‚ùå No se encontraron metaobjetos de iconos</p>
  {%- endif -%}
</div> {% endcomment %}

<div class="sideContainer">
  <div class="subscriptionMainDiv">
    <div class="subscribeSection" id="subscribeSection">
      {%- if section.settings.show_title -%}
        <div class="subscription-header">
          <h1>{{ section.settings.title | default: 'Customize Your Subscription' }}</h1>
          {%- if section.settings.subtitle != blank -%}
            <p>{{ section.settings.subtitle }}</p>
          {%- endif -%}
        </div>
      {%- endif -%}

      <div class="subscriptionSteps" id="subscriptionSteps">
        {%- comment -%} STEP 1: Product Selection {%- endcomment -%}
        {%- if section.settings.enable_product_selection -%}
          <div class="subscriptionOption step active" id="productSelectStep" data-step="1">
            <h2>
              <span class="step-indicator">1</span>
              {{ section.settings.product_step_title | default: 'Select your product:' }}
            </h2>
            <div class="subscriptionRow product-grid">
              {%- for product in products -%}
                <div class="subscriptionCol product-col" data-product="{{ product | json | escape }}">
                  <input
                    type="radio"
                    id="product-{{ product.id }}"
                    name="selectedProduct"
                    value="{{ product.id }}"
                    class="selection-steps-radio"
                    data-product-data="{{ product | json | escape }}"
                  >
                  <label for="product-{{ product.id }}" class="subscriptionCard card_product">
                    <div class="itemDiv itemCardRelative">
                      <div class="itemCard selectProductImage">
                        <div class="itemIcon">
                          <img
                            src="{{ product.images[0] | img_url: '400x' }}"
                            alt="{{ product.title }}"
                            loading="lazy"
                            width="120"
                            height="120"
                          >
                        </div>
                      </div>
                      <div class="itemDetail">
                        <h4>{{ product.title }}</h4>
                        {%- if section.settings.show_product_price -%}
                          <p class="price">{{ product.price | money }}</p>
                        {%- endif -%}
                        {%- if product.description != blank -%}
                          <p class="description">{{ product.description | strip_html | truncate: 80 }}</p>
                        {%- endif -%}
                      </div>
                    </div>
                  </label>
                </div>
              {%- endfor -%}
            </div>
          </div>
        {%- endif -%}

        {%- comment -%} STEP 2: Gift Options (MOVED HERE - DISABLED BY DEFAULT) {%- endcomment -%}
        {%- if section.settings.enable_gift_options -%}
          <div class="subscriptionOption step" id="giftStep" data-step="2">
            <h2>
              <span class="step-indicator">2</span>
              {{ section.settings.gift_step_title | default: 'Gift options:' }}
            </h2>
            <div class="subscriptionRow">
              <div class="subscriptionCol">
                <input type="radio" id="gift-no" name="isGift" value="false" class="selection-steps-radio">
                <label for="gift-no" class="subscriptionCard">
                  <div class="itemDiv">
                    <div class="itemIcon">
                      {%- assign icon_found = false -%}
                      {%- for icon_group in shop.metaobjects.image_icon_urls.values -%}
                        {%- for option in icon_group.options.value -%}
                          {%- assign option_name_normalized = option.name | downcase | replace: ' ', '_' -%}
                          {%- assign search_term_normalized = 'user' | downcase | replace: ' ', '_' -%}
                          {%- if option_name_normalized contains search_term_normalized -%}
                            <img
                              src="{{ option.image_url.value | image_url }}"
                              alt="{{ option.name }}"
                              width="40"
                              height="40"
                            >
                            {%- assign icon_found = true -%}
                            {%- break -%}
                          {%- endif -%}
                        {%- endfor -%}
                        {%- if icon_found -%}{%- break -%}{%- endif -%}
                      {%- endfor -%}
                      {%- unless icon_found -%}
                        <svg width="40" height="40" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                        </svg>
                      {%- endunless -%}
                    </div>
                    <div class="itemDetail">
                      <h4>For me</h4>
                    </div>
                  </div>
                </label>
              </div>
              <div class="subscriptionCol">
                <input type="radio" id="gift-yes" name="isGift" value="true" class="selection-steps-radio">
                <label for="gift-yes" class="subscriptionCard">
                  <div class="itemDiv">
                    <div class="itemIcon">
                      {%- assign icon_found = false -%}
                      {%- for icon_group in shop.metaobjects.image_icon_urls.values -%}
                        {%- for option in icon_group.options.value -%}
                          {%- assign option_name_normalized = option.name | downcase | replace: ' ', '_' -%}
                          {%- assign search_term_normalized = 'gift' | downcase | replace: ' ', '_' -%}
                          {%- if option_name_normalized contains search_term_normalized -%}
                            <img
                              src="{{ option.image_url.value | image_url }}"
                              alt="{{ option.name }}"
                              width="40"
                              height="40"
                            >
                            {%- assign icon_found = true -%}
                            {%- break -%}
                          {%- endif -%}
                        {%- endfor -%}
                        {%- if icon_found -%}{%- break -%}{%- endif -%}
                      {%- endfor -%}
                      {%- unless icon_found -%}
                        <svg width="40" height="40" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                        </svg>
                      {%- endunless -%}
                    </div>
                    <div class="itemDetail">
                      <h4>As a gift</h4>
                    </div>
                  </div>
                </label>
              </div>
            </div>
          </div>
        {%- endif -%}

        {%- comment -%} STEP 3: Size Selection (RENUMBERED) {%- endcomment -%}
        {%- if section.settings.enable_size_selection -%}
          <div class="subscriptionOption step" id="sizeStep" data-step="3">
            <h2>
              <span class="step-indicator">3</span>
              Select Size:
            </h2>
            <div class="subscriptionRow" id="sizeContainer">
              {%- comment -%} Se poblar√° din√°micamente {%- endcomment -%}
            </div>
          </div>
        {%- endif -%}

        {%- comment -%} STEP 4: Grind Selection (RENUMBERED) {%- endcomment -%}
        {%- if section.settings.enable_grind_selection -%}
          <div class="subscriptionOption step" id="grindStep" data-step="4">
            <h2>
              <span class="step-indicator">4</span>
              Select Grind:
            </h2>
            <div class="subscriptionRow" id="grindContainer">
              {%- comment -%} Se poblar√° din√°micamente {%- endcomment -%}
            </div>
          </div>
        {%- endif -%}

        {%- comment -%} STEP 5: Quantity Selection (RENUMBERED) {%- endcomment -%}
        {%- if section.settings.enable_quantity_selection -%}
          <div class="subscriptionOption step" id="quantityStep" data-step="5">
            <h2>
              <span class="step-indicator">5</span>
              {{ section.settings.quantity_step_title | default: 'How much do you want?' }}
            </h2>
            <div class="subscriptionRow" id="quantityContainer">
              {%- for i in (1..section.settings.max_quantity) -%}
                <div class="subscriptionCol size">
                  <input
                    type="radio"
                    id="quantity-{{ i }}"
                    name="selectedQuantity"
                    value="{{ i }}"
                    class="selection-steps-radio"
                  >
                  <label for="quantity-{{ i }}" class="subscriptionCard card_two">
                    <div class="itemDiv">
                      <div class="itemIcon">
                        {%- assign icon_url = '' -%}
                        {%- for singleStep in shop.metaobjects.image_icon_urls.values -%}
                          {%- for singleStepSingleOption in singleStep.options.value -%}
                            {%- assign option_name_normalized = singleStepSingleOption.name | downcase -%}
                            {%- case i -%}
                              {%- when 1 -%}
                                {%- if option_name_normalized == 'one bag' or option_name_normalized == '12oz' -%}
                                  {%- assign icon_url = singleStepSingleOption.image_url.value -%}
                                  {%- break -%}
                                {%- endif -%}
                              {%- when 2 -%}
                                {%- if option_name_normalized == 'two bags'
                                  or option_name_normalized == 'two 12oz bag'
                                -%}
                                  {%- assign icon_url = singleStepSingleOption.image_url.value -%}
                                  {%- break -%}
                                {%- endif -%}
                              {%- when 3 -%}
                                {%- if option_name_normalized == 'three bags'
                                  or option_name_normalized == 'three 12oz bag'
                                -%}
                                  {%- assign icon_url = singleStepSingleOption.image_url.value -%}
                                  {%- break -%}
                                {%- endif -%}
                            {%- endcase -%}
                          {%- endfor -%}
                          {%- if icon_url != blank -%}{%- break -%}{%- endif -%}
                        {%- endfor -%}
                        {%- if icon_url != blank -%}
                          <img src="{{ icon_url | image_url }}" alt="{{ i }} bag" width="40" height="40">
                        {%- else -%}
                          <svg width="40" height="40" viewBox="0 0 24 24" fill="currentColor">
                            <text x="12" y="16" text-anchor="middle" font-size="12" font-weight="bold">{{ i }}</text>
                          </svg>
                        {%- endif -%}
                      </div>
                      <div class="itemDetail">
                        <h4>{{ i }} bag{{ i | pluralize: '', 's' }}</h4>
                      </div>
                    </div>
                  </label>
                </div>
              {%- endfor -%}
            </div>
          </div>
        {%- endif -%}

        {%- comment -%} STEP 6: Coffee Type Selection (MOVED BEFORE FREQUENCY) {%- endcomment -%}
        {%- if section.settings.enable_coffee_type_selection -%}
          <div class="subscriptionOption step" id="coffeeTypeStep" data-step="6">
            <h2>
              <span class="step-indicator">6</span>
              {{ section.settings.coffee_type_step_title | default: 'Select Coffee Type:' }}
            </h2>
            <div class="subscriptionRow" id="coffeeTypeContainer">
              {%- comment -%} Se poblar√° din√°micamente con las opciones de tipo de caf√© {%- endcomment -%}
            </div>
          </div>
        {%- endif -%}

        {%- comment -%} STEP 7: Frequency Selection (LAST STEP) {%- endcomment -%}
        {%- if section.settings.enable_frequency_selection -%}
          <div class="subscriptionOption step" id="frequencyStep" data-step="7">
            <h2>
              <span class="step-indicator">7</span>
              {{ section.settings.frequency_step_title | default: 'How often?' }}
            </h2>
            <div class="subscriptionRow" id="frequencyContainer">
              {%- comment -%} Frecuencias se poblar√°n din√°micamente por JavaScript {%- endcomment -%}
            </div>
          </div>
        {%- endif -%}

        {%- comment -%} Add to Cart Button {%- endcomment -%}
        {%- if section.settings.show_add_to_cart -%}
          <p class="shipping-notice" style="text-align: center; margin: 20px 0 10px; font-size: 0.9rem; opacity: 0.8; color: #d4af37;">
            (Shipping is not included during the 2 months on us.)
          </p>
          <button type="button" class="add-subscription-btn" id="addSubscriptionBtn">
            {{ section.settings.add_to_cart_text | default: 'Add to Cart' }}
          </button>
        {%- endif -%}
      </div>
    </div>
  </div>
</div>

<style>
  .sideContainer {
    max-width: calc(100% - 60px);
    margin: 0 auto;
  }

  .subscriptionMainDiv {
    display: flex;
    flex-wrap: wrap;
  }

  .subscribeSection {
    width: 100%;
    background: #1b3c34;
    min-height: 615px;
    padding: 40px 70px;
    color: white;
  }

  .subscription-header {
    text-align: center;
    margin-bottom: 40px;
  }

  .subscription-header h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    color: white;
  }

  .subscription-header p {
    font-size: 1.1rem;
    opacity: 0.9;
  }

  .subscriptionSteps {
    display: flex;
    flex-direction: column;
    gap: 30px;
  }

  .subscriptionOption {
    margin-bottom: 30px;
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  /* Progressive step display - REAL step by step */
  .step {
    display: none;
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.4s ease;
  }

  .step.active {
    display: block;
    opacity: 1;
    transform: translateY(0);
  }

  .step.completed {
    display: block;
    opacity: 0.8;
    /* Removido: pointer-events: none; para permitir clicks */
  }

  /* Step indicators */
  .step-indicator {
    display: inline-block;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    background: #ccc;
    color: white;
    text-align: center;
    line-height: 30px;
    margin-right: 10px;
    font-weight: bold;
    font-size: 14px;
  }

  .step.active .step-indicator {
    background: #d4af37;
    animation: pulse 2s infinite;
  }

  .step.completed .step-indicator {
    background: #28a745;
    cursor: pointer;
  }

  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(212, 175, 55, 0.7);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(212, 175, 55, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(212, 175, 55, 0);
    }
  }

  .subscriptionOption h2 {
    font-size: 1.5rem;
    margin-bottom: 20px;
    color: white;
  }

  .subscriptionRow {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    justify-content: flex-start;
  }

  /* Grilla de 3 columnas para productos */
  .product-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
  }

  .product-col {
    width: 100%;
  }

  .subscriptionCol {
    flex: 0 0 auto;
    min-width: 200px;
  }

  .subscriptionCard {
    display: block;
    background: white;
    border-radius: 8px;
    padding: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 2px solid transparent;
    color: #333;
    height: 100%;
  }

  .subscriptionCard:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .selection-steps-radio:checked + .subscriptionCard {
    border-color: #d4af37;
    background: #f9f7f0;
  }

  .selection-steps-radio {
    display: none;
  }

  .itemDiv {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    height: 100%;
  }

  .itemIcon {
    margin-bottom: 15px;
  }

  .itemIcon img {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 8px;
  }

  .itemIcon svg {
    width: 40px;
    height: 40px;
    color: #1b3c34;
  }

  .itemDetail {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .itemDetail h4 {
    margin: 0 0 8px 0;
    font-size: 1.1rem;
    font-weight: 600;
  }

  .itemDetail h5 {
    margin: 4px 0;
    font-size: 0.85rem;
    opacity: 0.7;
    font-weight: normal;
  }

  .itemDetail p {
    margin: 4px 0;
    font-size: 0.9rem;
    opacity: 0.8;
  }

  .itemDetail .price {
    font-weight: 600;
    color: #d4af37;
  }

  .itemDetail .description {
    font-size: 0.8rem;
    line-height: 1.3;
  }

  .annual-option {
    margin-top: 15px;
  }

  .add-subscription-btn {
    display: none;
    background: #d4af37;
    color: white;
    border: none;
    padding: 15px 30px;
    font-size: 1.1rem;
    font-weight: 600;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 100%;
    max-width: 300px;
    margin: 30px auto 0;
  }

  .add-subscription-btn.visible {
    display: block;
    animation: slideUp 0.5s ease;
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .add-subscription-btn:hover {
    background: #b8941f;
  }

  @media (max-width: 1024px) {
    .product-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .subscribeSection {
      padding: 20px;
    }

    .product-grid {
      grid-template-columns: 1fr;
    }

    .subscriptionRow {
      justify-content: center;
    }

    .subscriptionCol {
      min-width: 150px;
      flex: 1 1 calc(50% - 10px);
    }

    .subscription-header h1 {
      font-size: 2rem;
    }
  }

  @media (max-width: 480px) {
    .subscriptionCol {
      flex: 1 1 100%;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const productRadios = document.querySelectorAll('input[name="selectedProduct"]');
    const frequencyContainer = document.getElementById('frequencyContainer');
    const addToCartBtn = document.getElementById('addSubscriptionBtn');
    
    // Variables globales
    let currentStepIndex = 0;
    let selectedProductData = null;
    let steps = [];
    let stepHistory = []; // Para navegaci√≥n hacia atr√°s

    // Datos de iconos desde metaobjetos
    const iconData = {
      {%- for singleStep in shop.metaobjects.image_icon_urls.values -%}
        {%- for singleStepSingleOption in singleStep.options.value -%}
          '{{ singleStepSingleOption.name | downcase | replace: ' ', '_' }}': '{{ singleStepSingleOption.image_url.value | image_url }}',
        {%- endfor -%}
      {%- endfor -%}
    };

    // Inicializaci√≥n mejorada
    function initializeSteps() {
      steps = document.querySelectorAll('.step');
      
      // Ocultar todos los pasos excepto el primero
      steps.forEach((step, index) => {
        if (index === 0) {
          step.classList.add('active');
          step.style.display = 'block';
        } else {
          step.style.display = 'none';
        }
      });
      
      // Agregar navegaci√≥n hacia atr√°s
      addBackwardNavigation();
      
      if (addToCartBtn) {
        addToCartBtn.style.display = 'none';
      }
    }

    // Funci√≥n mejorada para navegaci√≥n hacia atr√°s
    function addBackwardNavigation() {
      steps.forEach((step, index) => {
        const stepIndicator = step.querySelector('.step-indicator');
        if (stepIndicator) {
          // Permitir clic en todos los pasos completados y el actual
          if (index <= currentStepIndex) {
            stepIndicator.style.cursor = 'pointer';
            
            // Limpiar event listeners anteriores clonando el elemento
            const newIndicator = stepIndicator.cloneNode(true);
            stepIndicator.parentNode.replaceChild(newIndicator, stepIndicator);
            
            // Agregar nuevo event listener
            newIndicator.addEventListener('click', () => goToStep(index));
          }
        }
      });
    }

    // Funci√≥n corregida para ir a un step espec√≠fico
    function goToStep(targetIndex) {
      // Permitir ir a cualquier paso anterior o al actual
      if (targetIndex > currentStepIndex) return;
      
      // Si es el mismo paso, no hacer nada
      if (targetIndex === currentStepIndex) return;
      
      // Resetear y OCULTAR steps posteriores al objetivo
      for (let i = targetIndex + 1; i < steps.length; i++) {
        const step = steps[i];
        step.classList.remove('active', 'completed');
        step.style.display = 'none'; // OCULTAR completamente
        
        // Limpiar selecciones en steps posteriores
        const radios = step.querySelectorAll('input[type="radio"]');
        radios.forEach(radio => radio.checked = false);
      }
      
      // Ocultar bot√≥n de agregar al carrito
      if (addToCartBtn) {
        addToCartBtn.style.display = 'none';
      }
      
      // Actualizar √≠ndice actual
      currentStepIndex = targetIndex;
      
      // RESETEAR COMPLETAMENTE todos los pasos y configurar estados correctos
      for (let i = 0; i <= targetIndex; i++) {
        const step = steps[i];
        step.style.display = 'block'; // Asegurar que est√© visible
        
        // Remover TODAS las clases de estado primero
        step.classList.remove('active', 'completed');
        
        if (i < targetIndex) {
          // Pasos anteriores al objetivo: marcar como completados
          step.classList.add('completed');
        } else if (i === targetIndex) {
          // Paso objetivo: activar y remover cualquier estado completed
          step.classList.add('active');
        }
      }
      
      // Scroll al step objetivo
      steps[targetIndex].scrollIntoView({ behavior: 'smooth', block: 'center' });
      
      // Actualizar navegaci√≥n
      addBackwardNavigation();
    }

    // Funci√≥n corregida para isCurrentStepCompleted
    function isCurrentStepCompleted() {
      const currentStep = steps[currentStepIndex];
      if (!currentStep) return false;
      
      const stepId = currentStep.id;
      
      switch(stepId) {
        case 'productSelectStep':
          return document.querySelector('input[name="selectedProduct"]:checked') !== null;
        
        case 'giftStep':
          return document.querySelector('input[name="isGift"]:checked') !== null;
        
        case 'sizeStep':
          return document.querySelector('input[name="selectedSize"]:checked') !== null;
        
        case 'grindStep':
          return document.querySelector('input[name="selectedGrind"]:checked') !== null;
        
        case 'quantityStep':
          return document.querySelector('input[name="selectedQuantity"]:checked') !== null;
        
        case 'frequencyStep':
          return document.querySelector('input[name="selectedFrequency"]:checked') !== null;
        
        case 'coffeeTypeStep':
          return document.querySelector('input[name="selectedCoffeeType"]:checked') !== null;
        
        default:
          return false;
      }
    }

    // Funci√≥n mejorada para avanzar al siguiente step
    function advanceToNextStep() {
      if (currentStepIndex < steps.length - 1) {
        // Marcar step actual como completado
        steps[currentStepIndex].classList.add('completed');
        steps[currentStepIndex].classList.remove('active');
        
        // Avanzar al siguiente step
        currentStepIndex++;
        
        // MOSTRAR y activar el siguiente step
        steps[currentStepIndex].style.display = 'block';
        steps[currentStepIndex].classList.add('active');
        
        // Scroll al nuevo step
        steps[currentStepIndex].scrollIntoView({ behavior: 'smooth', block: 'center' });
        
        // Poblar contenido si es necesario
        populateStepContent(steps[currentStepIndex]);
        
        // Actualizar navegaci√≥n
        addBackwardNavigation();
      }
      
      // Mostrar bot√≥n de agregar al carrito si es el √∫ltimo step
      if (currentStepIndex === steps.length - 1 && isCurrentStepCompleted()) {
        if (addToCartBtn) {
          addToCartBtn.style.display = 'block';
        }
      }
    }

    // Funci√≥n corregida para poblar contenido de steps
    function populateStepContent(step) {
      const stepId = step.id;
      
      switch(stepId) {
        case 'sizeStep':
          if (selectedProductData) {
            updateSizeOptions(selectedProductData);
          }
          break;
          
        case 'grindStep':
          if (selectedProductData) {
            updateGrindOptions(selectedProductData);
          }
          break;
          
        case 'frequencyStep':
          if (selectedProductData) {
            updateFrequencyOptions(selectedProductData);
          }
          break;
          
        case 'coffeeTypeStep':
          if (selectedProductData) {
            updateCoffeeTypeOptions(selectedProductData);
          }
          break;
      }
    }

    // Funci√≥n simplificada - NO crear steps din√°micos, solo poblar los existentes
    function updateProductOptions(product) {
      if (!product.variants || product.variants.length === 0) return;
      
      // NO crear steps din√°micos - usar solo los est√°ticos
      // Los steps sizeStep y grindStep ya existen en el HTML
      
      // Actualizar array de steps
      steps = document.querySelectorAll('.step');
    }

    // Funci√≥n corregida para updateSizeOptions
    function updateSizeOptions(product) {
      const sizeContainer = document.getElementById('sizeContainer');
      if (!sizeContainer) return;
      
      sizeContainer.innerHTML = '';
      
      // Obtener opciones de tama√±o (primera opci√≥n del producto)
      const sizeOptions = new Set();
      
      product.variants.forEach(variant => {
        if (variant.available && variant.options && variant.options[0]) {
          sizeOptions.add(variant.options[0]);
        }
      });
      
      const sizes = Array.from(sizeOptions);
      
      sizes.forEach((size, index) => {
        const col = document.createElement('div');
        col.className = 'subscriptionCol';
        
        const iconUrl = findIconUrl(size.toLowerCase());
        let iconHtml = '';
        
        if (iconUrl) {
          iconHtml = `<img src="${iconUrl}" alt="${size}" width="40" height="40">`;
        } else {
          iconHtml = getDefaultIcon('Size', size);
        }
        
        col.innerHTML = `
          <input 
            type="radio" 
            id="size-${index}" 
            name="selectedSize" 
            value="${size}" 
            class="selection-steps-radio"
          >
          <label for="size-${index}" class="subscriptionCard">
            <div class="itemDiv">
              <div class="itemIcon">
                ${iconHtml}
              </div>
              <div class="itemDetail">
                <h4>${size}</h4>
                <h5>Size</h5>
              </div>
            </div>
          </label>
        `;
        
        sizeContainer.appendChild(col);
      });
      
      // Agregar event listeners
      addEventListenersToStep(document.getElementById('sizeStep'));
    }

    // Funci√≥n corregida para updateGrindOptions
    function updateGrindOptions(product) {
      const grindContainer = document.getElementById('grindContainer');
      if (!grindContainer) return;
      
      grindContainer.innerHTML = '';
      
      // Obtener opciones de molido (segunda opci√≥n del producto)
      const grindOptions = new Set();
      
      product.variants.forEach(variant => {
        if (variant.available && variant.options && variant.options[1]) {
          grindOptions.add(variant.options[1]);
        }
      });
      
      const grinds = Array.from(grindOptions);
      
      grinds.forEach((grind, index) => {
        const col = document.createElement('div');
        col.className = 'subscriptionCol';
        
        const iconUrl = findIconUrl(grind.toLowerCase());
        let iconHtml = '';
        
        if (iconUrl) {
          iconHtml = `<img src="${iconUrl}" alt="${grind}" width="40" height="40">`;
        } else {
          iconHtml = getDefaultIcon('Grind', grind);
        }
        
        col.innerHTML = `
          <input 
            type="radio" 
            id="grind-${index}" 
            name="selectedGrind" 
            value="${grind}" 
            class="selection-steps-radio"
          >
          <label for="grind-${index}" class="subscriptionCard">
            <div class="itemDiv">
              <div class="itemIcon">
                ${iconHtml}
              </div>
              <div class="itemDetail">
                <h4>${grind}</h4>
                <h5>Grind</h5>
              </div>
            </div>
          </label>
        `;
        
        grindContainer.appendChild(col);
      });
      
      // Agregar event listeners
      addEventListenersToStep(document.getElementById('grindStep'));
    }

    // Funci√≥n para filtrar opciones de grind seg√∫n el tama√±o seleccionado
    function updateGrindOptionsForSize(product, selectedSize) {
      const grindContainer = document.getElementById('grindContainer');
      if (!grindContainer || !selectedSize) return;
      
      grindContainer.innerHTML = '';
      
      // Filtrar variantes que coincidan con el tama√±o seleccionado
      const availableGrinds = new Set();
      
      product.variants.forEach(variant => {
        if (variant.available && variant.options && variant.options[0] === selectedSize) {
          if (variant.options[1]) {
            availableGrinds.add(variant.options[1]);
          }
        }
      });
      
      const grinds = Array.from(availableGrinds);
      
      grinds.forEach((grind, index) => {
        const col = document.createElement('div');
        col.className = 'subscriptionCol';
        
        const iconUrl = findIconUrl(grind.toLowerCase());
        let iconHtml = '';
        
        if (iconUrl) {
          iconHtml = `<img src="${iconUrl}" alt="${grind}" width="40" height="40">`;
        } else {
          iconHtml = getDefaultIcon('Grind', grind);
        }
        
        col.innerHTML = `
          <input 
            type="radio" 
            id="grind-${index}" 
            name="selectedGrind" 
            value="${grind}" 
            class="selection-steps-radio"
          >
          <label for="grind-${index}" class="subscriptionCard">
            <div class="itemDiv">
              <div class="itemIcon">
                ${iconHtml}
              </div>
              <div class="itemDetail">
                <h4>${grind}</h4>
                <h5>Grind</h5>
              </div>
            </div>
          </label>
        `;
        
        grindContainer.appendChild(col);
      });
      
      // Agregar event listeners
      addEventListenersToStep(document.getElementById('grindStep'));
    }

    function updateFrequencyOptions(product) {
      if (!frequencyContainer) return;
      
      frequencyContainer.innerHTML = '';
      
      const showAnnualOption = {{ section.settings.show_annual_option | json }};
      
      if (showAnnualOption) {
        // Solo mostrar opciones del grupo "Annual Subscription"
        if (product.selling_plan_groups && product.selling_plan_groups.length > 0) {
          const annualGroup = product.selling_plan_groups.find(group => 
            group.name && group.name.toLowerCase().includes('annual')
          );
          
          if (annualGroup && annualGroup.selling_plans) {
            // Mostrar solo el primer plan anual (todos son iguales)
            const plan = annualGroup.selling_plans[0];
            const col = document.createElement('div');
            col.className = 'subscriptionCol size';
            
            let iconHtml = findIconUrl('12 months') ? 
              `<img src="${findIconUrl('12 months')}" alt="Annual Subscription" width="40" height="40">` :
              getFrequencyIcon('annual');
            
            col.innerHTML = `
              <input 
                type="radio" 
                id="frequency-annual" 
                name="selectedFrequency" 
                value="annual" 
                class="selection-steps-radio"
              >
              <label for="frequency-annual" class="subscriptionCard card_three">
                <div class="itemDiv">
                  <div class="itemIcon">
                    ${iconHtml}
                  </div>
                  <div class="itemDetail">
                    <h4>Annual Subscription</h4>
                    <h5>Every Month</h5>
                  </div>
                </div>
              </label>
            `;
            
            frequencyContainer.appendChild(col);
          }
        }
      } else {
        // Mostrar solo frecuencias semanales (excluir grupo anual)
        if (product.selling_plan_groups && product.selling_plan_groups.length > 0) {
          product.selling_plan_groups.forEach((group, groupIndex) => {
            // Saltar el grupo anual
            if (group.name && group.name.toLowerCase().includes('annual')) {
              return;
            }
            
            if (group.selling_plans && group.selling_plans.length > 0) {
              group.selling_plans.forEach((plan, planIndex) => {
                const col = document.createElement('div');
                col.className = 'subscriptionCol size';
                
                const planName = plan.name.replace('Delivery ', '');
                const weekMatch = planName.match(/(\d+)\s*week/);
                const weeks = weekMatch ? weekMatch[1] : (groupIndex + 1);
                
                // Buscar icono espec√≠fico para la frecuencia
                let iconHtml = findIconUrl(`Every ${weeks} week${weeks > 1 ? 's' : ''}`) || 
                              findIconUrl(`${weeks} week`) ||
                              getFrequencyIcon(weeks);
                
                col.innerHTML = `
                  <input 
                    type="radio" 
                    id="frequency-${plan.id}" 
                    name="selectedFrequency" 
                    value="${plan.id}" 
                    class="selection-steps-radio"
                  >
                  <label for="frequency-${plan.id}" class="subscriptionCard card_three">
                    <div class="itemDiv">
                      <div class="itemIcon">
                        ${iconHtml}
                      </div>
                      <div class="itemDetail">
                        <h4>Every ${weeks} week${weeks > 1 ? 's' : ''}</h4>
                        <h5>Subscription</h5>
                      </div>
                    </div>
                  </label>
                `;
                
                frequencyContainer.appendChild(col);
              });
            }
          });
        }
      }
      
      // Add event listeners
      addEventListenersToStep(document.getElementById('frequencyStep'));
    }

    // Funci√≥n para actualizar las opciones de tipo de caf√©
    function updateCoffeeTypeOptions(selectedProduct) {
      const coffeeTypeContainer = document.getElementById('coffeeTypeContainer');
      if (!coffeeTypeContainer || !selectedProduct) return;
      
      coffeeTypeContainer.innerHTML = '';
      
      // Obtener opciones de tipo de caf√© (tercera opci√≥n del producto)
      const coffeeTypeOptions = new Set();
      
      selectedProduct.variants.forEach(variant => {
        if (variant.available && variant.options && variant.options[2]) {
          coffeeTypeOptions.add(variant.options[2]);
        }
      });
      
      const coffeeTypes = Array.from(coffeeTypeOptions);
      
      coffeeTypes.forEach((coffeeType, index) => {
        const col = document.createElement('div');
        col.className = 'subscriptionCol size';
        
        const iconUrl = findIconUrl(coffeeType.toLowerCase());
        let iconHtml = '';
        
        if (iconUrl) {
          iconHtml = `<img src="${iconUrl}" alt="${coffeeType}" width="40" height="40">`;
        } else {
          iconHtml = getDefaultIcon('CoffeeType', coffeeType);
        }
        
        col.innerHTML = `
          <input 
            type="radio" 
            id="coffee-type-${index}" 
            name="selectedCoffeeType" 
            value="${coffeeType}" 
            class="selection-steps-radio"
          >
          <label for="coffee-type-${index}" class="subscriptionCard card_four">
            <div class="itemDiv">
              <div class="itemIcon">
                ${iconHtml}
              </div>
              <div class="itemDetail type">
                <h4>${coffeeType}</h4>
              </div>
            </div>
          </label>
        `;
        
        coffeeTypeContainer.appendChild(col);
      });
      
      // Agregar event listeners
      addEventListenersToStep(document.getElementById('coffeeTypeStep'));
    }

    // Funci√≥n para obtener el icono del tipo de caf√© usando icon-finder
    function getCoffeeTypeIcon(coffeeType) {
      const normalizedType = coffeeType.toLowerCase();
      
      // Primero intentar encontrar en metaobjetos
      const iconUrl = findIconUrl(normalizedType);
      if (iconUrl) {
        return `<img src="${iconUrl}" alt="${coffeeType}" width="40" height="40">`;
      }
      
      // Si no se encuentra, usar icon-finder como fallback
      return `{% render 'icon-finder', icon: 'box' %}`;
    }

    // Helper functions
    function findIconUrl(searchTerm) {
      const normalizedTerm = searchTerm.toLowerCase().replace(/\s+/g, '_');
      
      // B√∫squeda directa
      if (iconData[normalizedTerm]) {
        return iconData[normalizedTerm];
      }
      
      // Mapeos espec√≠ficos para mejorar la b√∫squeda
      const iconMappings = {
        // Tama√±os
        'one_bag': 'one_bag',
        'two_bags': 'two_bags', 
        'three_bags': 'three_bags',
        '12oz': '12oz',
        'two_12oz_bag': 'two_12oz_bag',
        'three_12oz_bag': 'three_12oz_bag',
        '2lbs': '2lbs',
        '2lb': '2lb',
        '2lb': '2LB',
        '5lb': '5lb',
        '5lb': '5LB',
        
        // Frecuencias
        'every_1_week': 'every_1_week',
        'every_2_weeks': 'every_2_weeks', 
        'every_3_weeks': 'every_3_weeks',
        'every_4_weeks': 'every_4_weeks',
        '1_week': '1_week',
        '2_week': '2_week',
        '3_week': '3_week', 
        '4_week': '4_week',
        '3_months': '3_months',
        '6_months': '6_months',
        '12_months': '12_months',
        
        // Tipos de molido
        'whole_bean': 'whole_bean',
        'ground_coffee': 'ground_coffee',
        'whole_bean_gift': 'whole_bean_gift',
        'ground_coffee_gift': 'ground_coffee_gift',
        'espresso': 'espresso',
        'aeropress': 'aeropress',
        'drip': 'drip',
        'french': 'french',
        
        // Tipos de caf√©
        'arise': 'arise',
        'virtuosa': 'virtuosa',
        'ignite': 'ignite', 
        'uganda': 'uganda',
        'shantawene': 'shantawene',
        'huehuetenango': 'huehuetenango',
        
        // Opciones de regalo
        'giftsomeone': 'giftsomeone',
        'gift_someone': 'giftsomeone'
      };
      
      // Buscar en mapeos espec√≠ficos
      if (iconMappings[normalizedTerm]) {
        const mappedKey = iconMappings[normalizedTerm];
        if (iconData[mappedKey]) {
          return iconData[mappedKey];
        }
      }
      
      // B√∫squeda flexible mejorada
      for (const [key, url] of Object.entries(iconData)) {
        // B√∫squeda exacta
        if (key === normalizedTerm) {
          return url;
        }
        
        // B√∫squeda parcial
        if (key.includes(normalizedTerm) || normalizedTerm.includes(key)) {
          return url;
        }
        
        // B√∫squeda por palabras clave
        const keyWords = key.split('_');
        const searchWords = normalizedTerm.split('_');
        
        const hasCommonWords = keyWords.some(word => 
          searchWords.some(searchWord => 
            word.includes(searchWord) || searchWord.includes(word)
          )
        );
        
        if (hasCommonWords && keyWords.length >= 2 && searchWords.length >= 2) {
          return url;
        }
      }
      
      return null;
    }

    function getDefaultIcon(optionName, value) {
      const name = optionName.toLowerCase();
      const val = value.toLowerCase();
      
      if (name.includes('size') || name.includes('weight')) {
        return `<svg width="40" height="40" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/></svg>`;
      } else if (name.includes('grind') || name.includes('type')) {
        return `<svg width="40" height="40" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>`;
      } else {
        return `<svg width="40" height="40" viewBox="0 0 24 24" fill="currentColor"><path d="M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.1 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2z"/></svg>`;
      }
    }

    function getFrequencyIcon(weeks) {
      if (weeks === 'annual' || weeks === '12_months') {
        const iconUrl = findIconUrl('12_months') || findIconUrl('12_month');
        if (iconUrl) {
          return `<img src="${iconUrl}" alt="Annual Subscription" width="40" height="40">`;
        }
        return `<svg width="40" height="40" viewBox="0 0 24 24" fill="currentColor"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/></svg>`;
      }
      
      // Intentar diferentes variaciones para frecuencias
      const variations = [
        `every_${weeks}_week${weeks > 1 ? 's' : ''}`,
        `every_${weeks}_week`,
        `${weeks}_week${weeks > 1 ? 's' : ''}`, 
        `${weeks}_week`
      ];
      
      for (const variation of variations) {
        const iconUrl = findIconUrl(variation);
        if (iconUrl) {
          return `<img src="${iconUrl}" alt="Every ${weeks} weeks" width="40" height="40">`;
        }
      }
      
      return `<svg width="40" height="40" viewBox="0 0 24 24" fill="currentColor"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/></svg>`;
    }

    // Add event listeners to step inputs
    function addEventListenersToStep(step) {
      if (!step) return;
      
      const inputs = step.querySelectorAll('input[type="radio"]');
      inputs.forEach(input => {
        input.addEventListener('change', () => {
          // L√≥gica especial para cuando se selecciona un tama√±o
          if (input.name === 'selectedSize' && selectedProductData) {
            updateGrindOptionsForSize(selectedProductData, input.value);
          }
          
          // L√≥gica especial para frecuencia
          if (input.name === 'selectedFrequency') {
            handleFrequencySelection(input);
          }
          
          setTimeout(() => {
            if (isCurrentStepCompleted()) {
              advanceToNextStep();
            }
          }, 100);
        });
      });
    }

    // Nueva funci√≥n para manejar selecci√≥n de frecuencia
    function handleFrequencySelection(selectedInput) {
      // Ya no necesitamos l√≥gica especial aqu√≠ porque solo mostramos
      // un tipo de frecuencia a la vez basado en la configuraci√≥n
    }

    // Event listener corregido para selecci√≥n de producto
    productRadios.forEach(radio => {
      radio.addEventListener('change', function() {
        if (this.checked) {
          selectedProductData = JSON.parse(this.getAttribute('data-product-data'));
          
          // CORREGIDO: Llamar a las funciones de actualizaci√≥n din√°mica
          updateSizeOptions(selectedProductData);
          updateGrindOptions(selectedProductData);
          updateCoffeeTypeOptions(selectedProductData);
          updateFrequencyOptions(selectedProductData);
          
          setTimeout(() => {
            if (isCurrentStepCompleted()) {
              advanceToNextStep();
            }
          }, 100);
        }
      });
    });

    // Add event listeners to initial steps
    document.querySelectorAll('.step').forEach(step => {
      addEventListenersToStep(step);
    });

    // Inicializar cuando el DOM est√© listo
    initializeSteps();

    // Add to cart functionality
    if (addToCartBtn) {
      addToCartBtn.addEventListener('click', async function () {
        try {
          console.log('üõí Iniciando proceso de Add to Cart...');
          
          // Validar que se haya seleccionado un producto
          const selectedProduct = document.querySelector('input[name="selectedProduct"]:checked');
          if (!selectedProduct) {
            alert('Por favor selecciona un producto');
            return;
          }

          console.log('‚úÖ Producto seleccionado:', selectedProduct.value);

          // Obtener las selecciones del usuario
          const selectedSize = document.querySelector('input[name="selectedSize"]:checked')?.value;
          const selectedGrind = document.querySelector('input[name="selectedGrind"]:checked')?.value;
          const selectedQuantity = document.querySelector('input[name="selectedQuantity"]:checked')?.value || '1';
          const selectedCoffeeType = document.querySelector('input[name="selectedCoffeeType"]:checked')?.value;
          const selectedFrequency = document.querySelector('input[name="selectedFrequency"]:checked')?.value;

          console.log('üìã Selecciones del usuario:', {
            size: selectedSize,
            grind: selectedGrind,
            quantity: selectedQuantity,
            coffeeType: selectedCoffeeType,
            frequency: selectedFrequency
          });

          // Validar selecciones requeridas
          if (!selectedSize) {
            alert('Por favor selecciona un tama√±o');
            return;
          }
          if (!selectedGrind) {
            alert('Por favor selecciona un tipo de molido');
            return;
          }
          if (!selectedFrequency) {
            alert('Por favor selecciona una frecuencia');
            return;
          }

          // Obtener datos del producto
          let productData;
          try {
            productData = JSON.parse(selectedProduct.dataset.productData);
            console.log('üì¶ Datos del producto:', productData);
          } catch (parseError) {
            console.error('‚ùå Error al parsear datos del producto:', parseError);
            alert('Error en los datos del producto. Por favor recarga la p√°gina.');
            return;
          }
          
          // Construir array de opciones para encontrar la variante
          const selectedOptions = [selectedSize, selectedGrind];
          if (selectedCoffeeType) {
            selectedOptions.push(selectedCoffeeType);
          }

          console.log('üîç Buscando variante con opciones:', selectedOptions);
          console.log('üìä Variantes disponibles:', productData.variants);

          // Encontrar la variante que coincida
          const matchingVariant = findMatchingVariant(selectedOptions, productData.variants);
          
          if (!matchingVariant) {
            console.error('‚ùå No se encontr√≥ variante coincidente');
            console.log('Opciones buscadas:', selectedOptions);
            console.log('Variantes disponibles:', productData.variants.map(v => ({
              id: v.id,
              options: [v.option1, v.option2, v.option3].filter(Boolean),
              available: v.available
            })));
            alert('No se encontr√≥ una variante que coincida con tus selecciones. Por favor verifica tus opciones.');
            return;
          }

          console.log('‚úÖ Variante encontrada:', matchingVariant);

          // Verificar disponibilidad
          if (!matchingVariant.available) {
            alert('Lo sentimos, esta variante no est√° disponible en este momento.');
            return;
          }

          // Preparar datos para el carrito
          const cartData = {
            id: matchingVariant.id,
            quantity: parseInt(selectedQuantity)
          };
          
          // Agregar selling plan si hay frecuencia seleccionada
          if (selectedFrequency) {
            if (selectedFrequency === 'annual') {
              // Buscar el selling plan para suscripci√≥n anual
              const annualPlan = findAnnualSellingPlan(productData);
              if (annualPlan) {
                cartData.selling_plan = annualPlan.id;
                console.log('üìÖ Selling plan anual encontrado:', annualPlan);
              } else {
                console.warn('‚ö†Ô∏è No se encontr√≥ selling plan anual para este producto');
              }
            } else {
              // Para otras frecuencias, usar el valor directamente (deber√≠a ser un selling plan ID)
              cartData.selling_plan = selectedFrequency;
            }
          }

          console.log('üõçÔ∏è Datos para el carrito:', cartData);

          // Deshabilitar bot√≥n durante la petici√≥n
          addToCartBtn.disabled = true;
          addToCartBtn.textContent = 'Agregando...';

          // Realizar petici√≥n al carrito
          const response = await fetch(`${window.location.origin}/cart/add.js`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify(cartData)
          });

          console.log('üì° Respuesta del servidor:', response.status, response.statusText);

          if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Error HTTP:', response.status, errorText);
            throw new Error(`Error HTTP: ${response.status} - ${errorText}`);
          }

          const responseData = await response.json();
          console.log('‚úÖ Producto agregado exitosamente:', responseData);
          
          // Mostrar mensaje de √©xito
          alert('¬°Producto agregado al carrito exitosamente!');
          
          // Opcional: actualizar contador del carrito
          if (window.theme && window.theme.cartCount) {
            window.theme.cartCount.update();
          }
          
        } catch (error) {
          console.error('‚ùå Error completo al agregar al carrito:', error);
          alert(`Hubo un error al agregar el producto al carrito: ${error.message}`);
        } finally {
          // Rehabilitar bot√≥n
          addToCartBtn.disabled = false;
          addToCartBtn.textContent = '{{ section.settings.add_to_cart_text | default: "Add to Cart" }}';
        }
      });
    }

    // Funci√≥n para encontrar el selling plan anual
    function findAnnualSellingPlan(productData) {
      if (!productData.selling_plan_groups) {
        return null;
      }
      
      for (const group of productData.selling_plan_groups) {
        // Buscar grupo que contenga 'annual', '12-month', 'yearly' en el nombre
        if (group.name && 
            (group.name.toLowerCase().includes('annual') || 
             group.name.toLowerCase().includes('12-month') || 
             group.name.toLowerCase().includes('yearly'))) {
          
          // Retornar el primer selling plan del grupo anual
          if (group.selling_plans && group.selling_plans.length > 0) {
            console.log('üéØ Grupo anual encontrado:', group.name, 'Plan ID:', group.selling_plans[0].id);
            return group.selling_plans[0];
          }
        }
      }
      
      console.warn('‚ö†Ô∏è No se encontr√≥ grupo de selling plan anual');
      return null;
    }

    // Funci√≥n auxiliar mejorada para encontrar variante coincidente
    function findMatchingVariant(selectedOptions, variants) {
      console.log('üîç Buscando variante con opciones:', selectedOptions);
      
      return variants.find(variant => {
        if (!variant.available) {
          return false;
        }
        
        const variantOptions = [variant.option1, variant.option2, variant.option3].filter(Boolean);
        console.log(`Comparando variante ${variant.id}:`, variantOptions, 'con selecciones:', selectedOptions);
        
        // Verificar que todas las opciones seleccionadas est√©n en la variante
        const matches = selectedOptions.every(option => variantOptions.includes(option));
        
        if (matches) {
          console.log('‚úÖ Variante coincidente encontrada:', variant.id);
        }
        
        return matches;
      });
    }
  });
</script>

{% schema %}
{
  "name": "Subscription Selector",
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection",
      "info": "Select the collection to display products from"
    },
    {
      "type": "header",
      "content": "Section Display"
    },
    {
      "type": "checkbox",
      "id": "show_title",
      "label": "Show section title",
      "default": true
    },
    {
      "type": "text",
      "id": "title",
      "label": "Section title",
      "default": "Customize Your Subscription"
    },
    {
      "type": "textarea",
      "id": "subtitle",
      "label": "Section subtitle"
    },
    {
      "type": "header",
      "content": "Step 1: Product Selection"
    },
    {
      "type": "checkbox",
      "id": "enable_product_selection",
      "label": "Enable product selection step",
      "default": true
    },
    {
      "type": "text",
      "id": "product_step_title",
      "label": "Product step title",
      "default": "Select your product:"
    },
    {
      "type": "checkbox",
      "id": "show_product_price",
      "label": "Show product prices",
      "default": true
    },
    {
      "type": "header",
      "content": "Step 2: Product Options"
    },
    {
      "type": "checkbox",
      "id": "enable_size_selection",
      "label": "Enable size selection step",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_grind_selection",
      "label": "Enable grind selection step",
      "default": true
    },
    {
      "type": "header",
      "content": "Step 3: Quantity Selection"
    },
    {
      "type": "checkbox",
      "id": "enable_quantity_selection",
      "label": "Enable quantity selection step",
      "default": true
    },
    {
      "type": "text",
      "id": "quantity_step_title",
      "label": "Quantity step title",
      "default": "How much do you want?"
    },
    {
      "type": "range",
      "id": "max_quantity",
      "min": 1,
      "max": 10,
      "step": 1,
      "label": "Maximum quantity",
      "default": 5
    },
    {
      "type": "range",
      "id": "default_quantity",
      "min": 1,
      "max": 10,
      "step": 1,
      "label": "Default quantity",
      "default": 1
    },
    {
      "type": "header",
      "content": "Step 6: Coffee Type Selection"
    },
    {
      "type": "checkbox",
      "id": "enable_coffee_type_selection",
      "label": "Enable coffee type selection step",
      "default": true
    },
    {
      "type": "text",
      "id": "coffee_type_step_title",
      "label": "Coffee type step title",
      "default": "Select Coffee Type:"
    },
    {
      "type": "header",
      "content": "Step 7: Frequency Selection"
    },
    {
      "type": "checkbox",
      "id": "enable_frequency_selection",
      "label": "Enable frequency selection step",
      "default": true
    },
    {
      "type": "text",
      "id": "frequency_step_title",
      "label": "Frequency step title",
      "default": "How often?"
    },
    {
      "type": "checkbox",
      "id": "show_annual_option",
      "label": "Show annual subscription option",
      "default": true
    },
    {
      "type": "text",
      "id": "annual_option_title",
      "label": "Annual option title",
      "default": "Every Month"
    },
    {
      "type": "header",
      "content": "Step 2: Gift Options"
    },
    {
      "type": "checkbox",
      "id": "enable_gift_options",
      "label": "Enable gift options step",
      "default": false
    },
    {
      "type": "text",
      "id": "gift_step_title",
      "label": "Gift step title",
      "default": "Gift options:"
    },
    {
      "type": "header",
      "content": "Add to Cart"
    },
    {
      "type": "checkbox",
      "id": "show_add_to_cart",
      "label": "Show add to cart button",
      "default": true
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "label": "Add to cart button text",
      "default": "Add to Cart"
    }
  ],
  "presets": [
    {
      "name": "Subscription Selector",
      "settings": {
        "enable_product_selection": true,
        "enable_size_selection": true,
        "enable_grind_selection": true,
        "enable_quantity_selection": true,
        "enable_frequency_selection": true,
        "enable_coffee_type_selection": true,
        "enable_gift_options": false,
        "show_annual_option": true
      }
    }
  ]
}
{% endschema %}
